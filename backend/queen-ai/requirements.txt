# Core
# Using FastAPI 0.115.0+ for anyio 4.x compatibility
fastapi>=0.115.0
uvicorn[standard]>=0.30.0
python-multipart>=0.0.6
python-dotenv>=1.0.0
setuptools>=68.0.0

# HTTP Client
aiohttp>=3.8.0,<4.0.0

# LLM Providers
google-cloud-aiplatform>=1.25.0,<2.0.0
openai>=1.0.0,<2.0.0
anthropic>=0.34.0
# grok-sdk (when available)

# Fetch.ai / uAgents - Temporarily disabled due to compatibility issues
# uagents==0.22.10
# cosmpy>=0.11.0,<0.12.0
# Database
sqlalchemy==2.0.36
asyncpg==0.30.0
alembic==1.14.0
redis==5.0.1
psycopg[binary]>=3.2.0
pymysql==1.1.0
cryptography==41.0.7  # For MySQL SSL

# Blockchain
web3==6.11.3
eth-account==0.10.0
# Modern Solana support using solders (Rust-based, no dependency conflicts)
solders>=0.20.0  # Solana types and primitives (Rust-based)
# Note: Using custom RPC client in app/blockchain/solana_rpc_client.py
# instead of legacy solana package to avoid httpx/websockets conflicts
eth-utils==2.3.1

# Data Processing
pandas==2.2.3
numpy==2.2.1
# Using Pydantic 2.5.0 with compatible pydantic-settings
pydantic[email]>=2.5.0,<3.0.0
pydantic-settings>=2.1.0,<3.0.0

# Logging and Monitoring
structlog==23.2.0
python-json-logger==2.0.7

# Google Cloud
google-cloud-storage==2.10.0
google-cloud-bigquery==3.13.0
google-cloud-secret-manager==2.16.4
google-cloud-logging==3.8.0

# Utilities
# Updated for google-genai 1.42.0 compatibility
httpx>=0.28.1,<1.0.0
requests>=2.31.0
tenacity==9.0.0
psutil>=5.9.0
anyio>=4.8.0,<5.0.0
websockets>=13.0.0,<15.1.0
# Using version compatible with solana
cachetools<5.0.0,>=4.2.2

# Testing
pytest==8.3.4
pytest-asyncio==0.24.0
pytest-cov==6.0.0
pytest-mock==3.14.0
faker==33.1.0

# Development
black==24.10.0
flake8==7.1.1
mypy==1.13.0
isort==5.13.2
pylint>=3.0.0

# Security
passlib[bcrypt]==1.7.4
python-jose[cryptography]==3.3.0
python-multipart>=0.0.6

# Security - Image Processing (Optional - NOT required for Google Cloud deployment)
# For ImageContentScanner functionality
Pillow>=10.0.0  # Image processing
# pytesseract>=0.3.10  # OCR - DISABLED for cloud deployment (requires system binary)
# Note: pytesseract requires tesseract-ocr system package
# Install with: brew install tesseract (macOS) or apt-get install tesseract-ocr (Ubuntu)
# For cloud deployment, use Google Cloud Vision API instead

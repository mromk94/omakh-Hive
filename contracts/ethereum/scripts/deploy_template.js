/**
 * Dynamic Contract Deployment Script
 * Generated by Queen AI Contract Deployer
 * 
 * This script is auto-generated - do not edit manually
 */

const hre = require("hardhat");
const fs = require('fs');
const path = require('path');

async function main() {
  console.log("üöÄ Starting contract deployment...");
  
  // Get deployment configuration from environment or args
  const contractName = process.env.CONTRACT_NAME || "{{CONTRACT_NAME}}";
  const constructorArgs = process.env.CONSTRUCTOR_ARGS 
    ? JSON.parse(process.env.CONSTRUCTOR_ARGS) 
    : {{CONSTRUCTOR_ARGS}};
  
  console.log(`üìã Contract: ${contractName}`);
  console.log(`üìã Constructor Args: ${JSON.stringify(constructorArgs)}`);
  console.log(`üìã Network: ${hre.network.name}`);
  
  // Get deployer account
  const [deployer] = await hre.ethers.getSigners();
  console.log(`üë§ Deployer: ${deployer.address}`);
  
  // Check balance
  const balance = await hre.ethers.provider.getBalance(deployer.address);
  console.log(`üí∞ Balance: ${hre.ethers.formatEther(balance)} ETH`);
  
  // Get contract factory
  console.log(`üî® Compiling ${contractName}...`);
  const ContractFactory = await hre.ethers.getContractFactory(contractName);
  
  // Estimate gas
  console.log("‚ö° Estimating deployment gas...");
  const deployTx = await ContractFactory.getDeployTransaction(...constructorArgs);
  const estimatedGas = await hre.ethers.provider.estimateGas(deployTx);
  const gasPrice = await hre.ethers.provider.getFeeData();
  const estimatedCost = estimatedGas * (gasPrice.gasPrice || 0n);
  
  console.log(`‚õΩ Estimated Gas: ${estimatedGas.toString()}`);
  console.log(`üíµ Gas Price: ${hre.ethers.formatUnits(gasPrice.gasPrice || 0, 'gwei')} Gwei`);
  console.log(`üí∏ Estimated Cost: ${hre.ethers.formatEther(estimatedCost)} ETH`);
  
  // Deploy contract
  console.log(`\nüöÄ Deploying ${contractName}...`);
  const contract = await ContractFactory.deploy(...constructorArgs);
  
  console.log(`‚è≥ Waiting for deployment transaction...`);
  console.log(`üìù Transaction Hash: ${contract.deploymentTransaction()?.hash}`);
  
  // Wait for deployment
  await contract.waitForDeployment();
  const contractAddress = await contract.getAddress();
  
  console.log(`\n‚úÖ Contract deployed successfully!`);
  console.log(`üìç Contract Address: ${contractAddress}`);
  console.log(`üîó Transaction Hash: ${contract.deploymentTransaction()?.hash}`);
  
  // Wait for confirmations
  console.log(`\n‚è≥ Waiting for confirmations...`);
  const receipt = await contract.deploymentTransaction()?.wait(2);
  console.log(`‚úÖ Confirmed in block: ${receipt?.blockNumber}`);
  console.log(`‚õΩ Gas Used: ${receipt?.gasUsed.toString()}`);
  
  // Save deployment info
  const deploymentInfo = {
    contract: contractName,
    address: contractAddress,
    transactionHash: contract.deploymentTransaction()?.hash,
    blockNumber: receipt?.blockNumber,
    gasUsed: receipt?.gasUsed.toString(),
    deployer: deployer.address,
    network: hre.network.name,
    timestamp: new Date().toISOString(),
    constructorArgs: constructorArgs
  };
  
  const deploymentsDir = path.join(__dirname, '..', 'deployments');
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir, { recursive: true });
  }
  
  const networkDir = path.join(deploymentsDir, hre.network.name);
  if (!fs.existsSync(networkDir)) {
    fs.mkdirSync(networkDir, { recursive: true });
  }
  
  const deploymentFile = path.join(networkDir, `${contractName}.json`);
  fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
  console.log(`üíæ Deployment info saved to: ${deploymentFile}`);
  
  // Print verification command
  if (hre.network.name !== 'localhost' && hre.network.name !== 'hardhat') {
    console.log(`\nüìù To verify on Etherscan, run:`);
    console.log(`npx hardhat verify --network ${hre.network.name} ${contractAddress} ${constructorArgs.join(' ')}`);
  }
  
  // Output for parsing (JSON format for easy parsing)
  console.log('\n--- DEPLOYMENT_RESULT_START ---');
  console.log(JSON.stringify({
    success: true,
    contractAddress: contractAddress,
    transactionHash: contract.deploymentTransaction()?.hash,
    blockNumber: receipt?.blockNumber,
    gasUsed: receipt?.gasUsed.toString(),
    deployer: deployer.address
  }));
  console.log('--- DEPLOYMENT_RESULT_END ---');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('\n‚ùå Deployment failed:', error);
    console.log('\n--- DEPLOYMENT_RESULT_START ---');
    console.log(JSON.stringify({
      success: false,
      error: error.message,
      stack: error.stack
    }));
    console.log('--- DEPLOYMENT_RESULT_END ---');
    process.exit(1);
  });
